@page "/employee"
@using System.Net.Http.Json
@using HR.Cifor.Models
@inject HttpClient Http
@inject DialogService DialogService
@inject NotificationService NotificationService

<RadzenText Text="Employee" TextStyle="TextStyle.DisplayH4" Class="mb-5">
    <RadzenIcon Icon="table_view" />
</RadzenText>

<RadzenStack Orientation="Orientation.Horizontal" Gap="10px" class="mb-4">
    <RadzenTextBox @bind-Value="searchName" Placeholder="Search by Name" Style="width: 200px;" />
    <RadzenTextBox @bind-Value="searchDepartment" Placeholder="Search by Department" Style="width: 200px;" />
    <RadzenButton Click="LoadData" Icon="search" Text="Search" />
</RadzenStack>

<RadzenStack Orientation="Orientation.Horizontal" class="mb-4">
    <RadzenButton Click="Create" Icon="add" Text="Create New Employee" class="mr-2" />
</RadzenStack>

<RadzenDataGrid Data="employeeData" TItem="EmployeeModel"
                AllowFiltering="true" FilterMode="FilterMode.Advanced" LogicalFilterOperator="LogicalFilterOperator.Or" AllowSorting="true"
                AllowPaging="true" PageSize="10" PagerHorizontalAlign="HorizontalAlign.Right" ShowPagingSummary="true"
                class="rz-shadow-1" AllowAlternatingRows="false">
    <Columns>
        <RadzenDataGridColumn TItem="EmployeeModel" Sortable="false" Filterable="false" Width="120px">
            <Template Context="item">
                <RadzenButton Click="() => Update(item)" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Icon="edit" class="rz-mr-2" />
                <RadzenButton Click="() => Delete(item)" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Icon="delete" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="EmployeeModel" Property="EmployeeId" Title="Id" />
        <RadzenDataGridColumn TItem="EmployeeModel" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="EmployeeModel" Property="Address" Title="Address" />
        <RadzenDataGridColumn TItem="EmployeeModel" Property="Department" Title="Department" />
        <RadzenDataGridColumn TItem="EmployeeModel" Property="Email" Title="Email" />
    </Columns>
</RadzenDataGrid>

@code {
    private string editMode = "";
    private EmployeeModel editModel = new();
    private List<EmployeeModel> employeeData = new();
    private string searchName = string.Empty;
    private string searchDepartment = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var url = $"api/employees/search?name={Uri.EscapeDataString(searchName ?? "")}&department={Uri.EscapeDataString(searchDepartment ?? "")}";
        employeeData = await Http.GetFromJsonAsync<List<EmployeeModel>>(url) ?? new();
    }

    async Task ShowEdit()
    {
        var title = editMode == "Create" ? "Create New Employee" : $"Update Employee {editModel.Name}";

        await DialogService.OpenAsync(title, content =>
            @<RadzenStack>
                <RadzenFormField Text="Employee Id">
                    <RadzenTextBox @bind-Value="editModel.EmployeeId" Disabled="@(editMode == "Update")" />
                </RadzenFormField>

                <RadzenFormField Text="Name">
                    <RadzenTextBox @bind-Value="editModel.Name" />
                </RadzenFormField>

                <RadzenFormField Text="Address">
                    <RadzenTextBox @bind-Value="editModel.Address" />
                </RadzenFormField>

                <RadzenFormField Text="Department">
                    <RadzenTextBox @bind-Value="editModel.Department" />
                </RadzenFormField>

                <RadzenFormField Text="Email">
                    <RadzenTextBox @bind-Value="editModel.Email" />
                </RadzenFormField>

                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" class="rz-mt-5">
                    <RadzenButton Click="CancelEdit" ButtonStyle="ButtonStyle.Light" Text="Cancel" Icon="close" />
                    <RadzenButton Click="SaveEdit" Text="Save" Icon="done" class="rz-px-7" />
                </RadzenStack>
            </RadzenStack>
        );
    }

    private async Task Create()
    {
        editMode = "Create";
        editModel = new EmployeeModel();
        await ShowEdit();
    }

    private async Task Update(EmployeeModel model)
    {
        editMode = "Update";
        // Deep copy supaya form tidak langsung update grid sebelum simpan
        editModel = new EmployeeModel
        {
            EmployeeId = model.EmployeeId,
            Name = model.Name,
            Address = model.Address,
            Department = model.Department,
            Email = model.Email
        };
        await ShowEdit();
    }

    private async Task Delete(EmployeeModel model)
    {
        var result = await DialogService.Confirm(
            $"Are you sure you want to delete employee: {model.Name}?",
            "Confirm Delete",
            new ConfirmOptions { OkButtonText = "Delete", CancelButtonText = "Cancel" }
        );

        if (result == true)
        {
            var response = await Http.DeleteAsync($"api/employees/{model.EmployeeId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadData();
                NotificationService.Notify(NotificationSeverity.Success, "Employee deleted successfully");
                StateHasChanged();
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Failed to delete employee");
            }
        }
    }

    private async Task SaveEdit()
    {
        try
        {
            HttpResponseMessage response;

            if (editMode == "Create")
            {
                response = await Http.PostAsJsonAsync("api/employees", editModel);
            }
            else
            {
                response = await Http.PutAsJsonAsync($"api/employees/{editModel.EmployeeId}", editModel);
            }

            if (response.IsSuccessStatusCode)
            {
                await LoadData();
                NotificationService.Notify(NotificationSeverity.Success, "Data saved successfully.");
                DialogService.Close();
                StateHasChanged();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                NotificationService.Notify(NotificationSeverity.Error, $"Error: {error}");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, ex.Message);
        }
    }

    private void CancelEdit()
    {
        DialogService.Close();
    }
}
